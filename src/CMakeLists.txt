cmake_minimum_required(VERSION 3.30)
project(MonicaImageProcess LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED True)

# ÊòØÂê¶ÊòØÂèëÂ∏ÉÊ®°ÂºèÔºàÈªòËÆ§Âê¶Ôºâ
option(DEPLOY_MODE "Build in deploy (release) mode" OFF)

message(STATUS "===============================")
message(STATUS "DEPLOY_MODE = ${DEPLOY_MODE}")
message(STATUS "Operation system: ${CMAKE_SYSTEM_NAME}")
message(STATUS "Host processor: ${CMAKE_HOST_SYSTEM_PROCESSOR}")

# Âπ≥Âè∞Âà§ÂÆö
if(CMAKE_SYSTEM_NAME MATCHES "Linux")
    set(CURRENT_SYSTEM "Linux")
elseif(CMAKE_SYSTEM_NAME MATCHES "Windows")
    set(CURRENT_SYSTEM "Windows")
elseif(CMAKE_SYSTEM_NAME MATCHES "Darwin")
    set(CURRENT_SYSTEM "MacOS")
endif()

find_package(PkgConfig REQUIRED)

# ==== ‚úÖ OpenCV ÈÖçÁΩÆ ====
if (DEPLOY_MODE)
    set(OpenCV_DIR "$ENV{HOME}/Libs/opencv-install/lib/cmake/opencv4")
    find_package(OpenCV REQUIRED PATHS ${OpenCV_DIR} NO_DEFAULT_PATH)
else()
    find_package(OpenCV REQUIRED)
endif()
include_directories(${OpenCV_INCLUDE_DIRS})

# ==== ‚úÖ JNI ÈÖçÁΩÆ ====
set(JAVA_AWT_LIBRARY NotNeeded)
set(JAVA_JVM_LIBRARY NotNeeded)
set(JAVA_INCLUDE_PATH2 NotNeeded)
set(JAVA_AWT_INCLUDE_PATH NotNeeded)
find_package(JNI REQUIRED)
include_directories(${JNI_INCLUDE_DIRS})
include_directories(jni)

# ==== ‚úÖ LibRaw ÈÖçÁΩÆ ====
if (DEPLOY_MODE)
    set(LIBRAW_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/thirdparty/libraw/include)
    set(LIBRAW_LIB_PATH ${CMAKE_SOURCE_DIR}/thirdparty/libraw/lib/libraw.a)
    include_directories(${LIBRAW_INCLUDE_DIR})
else()
    pkg_check_modules(LIBRAW REQUIRED libraw)
    include_directories(${LIBRAW_INCLUDE_DIRS})
    link_directories(${LIBRAW_LIBRARY_DIRS})
endif()

# ==== ‚úÖ libheif ÈÖçÁΩÆ ====
pkg_check_modules(LIBHEIF REQUIRED libheif)
include_directories(${LIBHEIF_INCLUDE_DIRS})
link_directories(${LIBHEIF_LIBRARY_DIRS})

# ËæìÂá∫Ë∑ØÂæÑ
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/install/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/install/lib)

# Ê∫êÊñá‰ª∂Ê∏ÖÂçï
set(SRC_FILES
        ../include/library.h                                library.cpp
        ../jni/cn_netdiscovery_monica_opencv_ImageProcess.h ../jni/cn_netdiscovery_monica_opencv_ImageProcess.cpp
        ../include/colorcorrection/ColorCorrection.h        colorcorrection/ColorCorrection.cpp
        ../include/matchTemplate/MatchTemplate.h            matchTemplate/MatchTemplate.cpp
        ../include/utils/JNIUtils.h                         utils/JNIUtils.cpp
        ../include/utils/Utils.h                            utils/Utils.cpp
        )

# ÁîüÊàêÂÖ±‰∫´Â∫ìÂêç
if (${CURRENT_SYSTEM} MATCHES "MacOS" AND ${CMAKE_HOST_SYSTEM_PROCESSOR} MATCHES "x86_64")
    set(LIB_NAME MonicaImageProcess)
elseif (${CURRENT_SYSTEM} MATCHES "MacOS" AND ${CMAKE_HOST_SYSTEM_PROCESSOR} MATCHES "arm64")
    set(LIB_NAME MonicaImageProcess_aarch64)
elseif (${CURRENT_SYSTEM} MATCHES "Linux")
    set(LIB_NAME MonicaImageProcess)
endif()

# Ê∑ªÂä†Â∫ì
add_library(${LIB_NAME} SHARED ${SRC_FILES})

# ËÆæÁΩÆ RPATH
if(${CURRENT_SYSTEM} MATCHES "MacOS")
    set_target_properties(${LIB_NAME} PROPERTIES
            BUILD_WITH_INSTALL_RPATH TRUE
            INSTALL_RPATH "@loader_path"
            MACOSX_RPATH ON
            )
endif()

# ==== ‚úÖ ÈìæÊé•Â∫ì ====
if (DEPLOY_MODE)
    target_link_libraries(${LIB_NAME}
            ${OpenCV_LIBS}
            ${LIBHEIF_LIBRARIES}
            ${LIBRAW_LIB_PATH}
            z                 # ‚úÖ ÈùôÊÄÅÈìæÊé• libraw Êó∂ÊâãÂä®Âä† zlib
            )
else()
    target_link_libraries(${LIB_NAME}
            ${OpenCV_LIBS}
            ${LIBHEIF_LIBRARIES}
            ${LIBRAW_LIBRARIES}
            )
endif()

# ==== ‚úÖ ÂêéÂ§ÑÁêÜ ====
if (${CURRENT_SYSTEM} MATCHES "MacOS")
    add_custom_command(
            TARGET ${LIB_NAME}
            POST_BUILD
            COMMAND bash ${CMAKE_SOURCE_DIR}/script/fix_dylib_dependencies.sh
            COMMENT "üîß Fixing dylib dependencies..."
    )
endif()